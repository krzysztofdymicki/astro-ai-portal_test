-- Usunięcie tabel w odpowiedniej kolejności (unikaj naruszenia ograniczeń kluczy obcych)
DROP TABLE IF EXISTS general_horoscope_reads CASCADE;
DROP TABLE IF EXISTS personal_horoscope_reads CASCADE;
DROP TABLE IF EXISTS general_horoscopes CASCADE;
DROP TABLE IF EXISTS personal_horoscopes CASCADE;
DROP TABLE IF EXISTS profile_answers CASCADE;
DROP TABLE IF EXISTS credit_transactions CASCADE;
DROP TABLE IF EXISTS user_credits CASCADE;
DROP TABLE IF EXISTS profiles CASCADE;
DROP TABLE IF EXISTS horoscope_types CASCADE;
DROP TABLE IF EXISTS profile_questions CASCADE;
DROP TABLE IF EXISTS zodiac_signs CASCADE;

-- KROK 2: Tworzenie tabel od nowa

-- Tabela znaków zodiaku
CREATE TABLE zodiac_signs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(50) NOT NULL UNIQUE,
    symbol VARCHAR(10) NOT NULL,
    element VARCHAR(20) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);

-- Tabela typów horoskopów
CREATE TABLE horoscope_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(50) NOT NULL UNIQUE,
    duration VARCHAR(20) NOT NULL,
    description TEXT
);

-- Tabela profili użytkowników
CREATE TABLE profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    birth_date DATE,
    birth_time TIME,
    birth_location VARCHAR(255),
    current_location VARCHAR(255),
    relationship_status VARCHAR(50),
    zodiac_sign_id UUID REFERENCES zodiac_signs(id),
    profile_completion_percentage INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela kredytów użytkowników
CREATE TABLE user_credits (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    balance INTEGER NOT NULL DEFAULT 0,
    last_updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_user_credits UNIQUE (user_id)
);

-- Tabela historii transakcji kredytów
CREATE TABLE credit_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    amount INTEGER NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela dodatkowych pytań profilowych
CREATE TABLE profile_questions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    question TEXT NOT NULL,
    credits_reward INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- Tabela odpowiedzi na pytania profilowe
CREATE TABLE profile_answers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES profile_questions(id),
    answer TEXT,
    answered_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_user_question UNIQUE (user_id, question_id)
);

-- Tabela horoskopów ogólnych
CREATE TABLE general_horoscopes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    zodiac_sign_id UUID NOT NULL REFERENCES zodiac_signs(id),
    horoscope_type_id UUID NOT NULL REFERENCES horoscope_types(id),
    content TEXT NOT NULL,
    valid_from DATE NOT NULL,
    valid_to DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_general_horoscope UNIQUE (zodiac_sign_id, horoscope_type_id, valid_from)
);

-- Tabela horoskopów spersonalizowanych
CREATE TABLE personal_horoscopes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    content_audio_url VARCHAR(255),
    content_video_url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE,
    ai_model_version VARCHAR(50),
    generation_parameters JSONB
);

-- Tabela odczytów horoskopów ogólnych
CREATE TABLE general_horoscope_reads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    horoscope_id UUID NOT NULL REFERENCES general_horoscopes(id),
    read_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_general_horoscope_read UNIQUE (user_id, horoscope_id)
);

-- Tabela odczytów horoskopów spersonalizowanych
CREATE TABLE personal_horoscope_reads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    horoscope_id UUID NOT NULL REFERENCES personal_horoscopes(id),
    read_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_personal_horoscope_read UNIQUE (user_id, horoscope_id)
);

-- KROK 3: Włączenie Row Level Security dla wszystkich tabel
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE general_horoscopes ENABLE ROW LEVEL SECURITY;
ALTER TABLE personal_horoscopes ENABLE ROW LEVEL SECURITY;
ALTER TABLE general_horoscope_reads ENABLE ROW LEVEL SECURITY;
ALTER TABLE personal_horoscope_reads ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_credits ENABLE ROW LEVEL SECURITY;
ALTER TABLE credit_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_answers ENABLE ROW LEVEL SECURITY;

-- KROK 4: Dodanie polityk dostępu
-- Polityki dostępu dla tabeli profiles
CREATE POLICY "Users can view only their own profile"
ON profiles FOR SELECT
USING (auth.uid() = id);

CREATE POLICY "Users can update only their own profile"
ON profiles FOR UPDATE
USING (auth.uid() = id);

CREATE POLICY "Users can insert only their own profile"
ON profiles FOR INSERT
WITH CHECK (auth.uid() = id);

-- Polityki dostępu dla tabeli user_credits
CREATE POLICY "Users can view only their own credits"
ON user_credits FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can view only their own credit transactions"
ON credit_transactions FOR SELECT
USING (auth.uid() = user_id);

-- Polityki dostępu dla tabeli personal_horoscopes
CREATE POLICY "Users can view only their own personal horoscopes"
ON personal_horoscopes FOR SELECT
USING (auth.uid() = user_id);

-- Polityki dostępu dla tabel odczytów
CREATE POLICY "Users can view only their own horoscope reads"
ON general_horoscope_reads FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can view only their own personal horoscope reads"
ON personal_horoscope_reads FOR SELECT
USING (auth.uid() = user_id);

-- Polityki dostępu dla tabeli odpowiedzi
CREATE POLICY "Users can view only their own answers"
ON profile_answers FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert only their own answers"
ON profile_answers FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- KROK 5: Tworzenie indeksów dla poprawy wydajności
CREATE INDEX idx_profiles_zodiac ON profiles(zodiac_sign_id);
CREATE INDEX idx_profiles_birth_date ON profiles(birth_date);
CREATE INDEX idx_general_horoscopes_zodiac ON general_horoscopes(zodiac_sign_id);
CREATE INDEX idx_general_horoscopes_type ON general_horoscopes(horoscope_type_id);
CREATE INDEX idx_general_horoscopes_validity ON general_horoscopes(valid_from, valid_to);
CREATE INDEX idx_personal_horoscopes_user ON personal_horoscopes(user_id);
CREATE INDEX idx_personal_horoscopes_created ON personal_horoscopes(created_at);

-- KROK 6: Wstawienie danych inicjujących
-- Wstawienie znaków zodiaku
INSERT INTO zodiac_signs (name, symbol, element, start_date, end_date) VALUES
('Baran', '♈', 'Ogień', '2000-03-21', '2000-04-19'),
('Byk', '♉', 'Ziemia', '2000-04-20', '2000-05-20'),
('Bliźnięta', '♊', 'Powietrze', '2000-05-21', '2000-06-20'),
('Rak', '♋', 'Woda', '2000-06-21', '2000-07-22'),
('Lew', '♌', 'Ogień', '2000-07-23', '2000-08-22'),
('Panna', '♍', 'Ziemia', '2000-08-23', '2000-09-22'),
('Waga', '♎', 'Powietrze', '2000-09-23', '2000-10-22'),
('Skorpion', '♏', 'Woda', '2000-10-23', '2000-11-21'),
('Strzelec', '♐', 'Ogień', '2000-11-22', '2000-12-21'),
('Koziorożec', '♑', 'Ziemia', '2000-12-22', '2000-01-19'),
('Wodnik', '♒', 'Powietrze', '2000-01-20', '2000-02-18'),
('Ryby', '♓', 'Woda', '2000-02-19', '2000-03-20');

-- Wstawienie typów horoskopów
INSERT INTO horoscope_types (name, duration, description) VALUES
('Dzienny', 'daily', 'Horoskop na jeden dzień'),
('Tygodniowy', 'weekly', 'Horoskop na tydzień'),
('Miesięczny', 'monthly', 'Horoskop na miesiąc'),
('Roczny', 'yearly', 'Horoskop na cały rok');

-- Wstawienie pytań profilowych
INSERT INTO profile_questions (question, credits_reward) VALUES
('Jaki jest twój ulubiony kolor?', 5),
('Jakie masz plany na przyszłość?', 10),
('Opisz swoją osobowość w 3 słowach.', 5),
('Co jest twoim największym marzeniem?', 15),
('Jakie są twoje zainteresowania?', 10);

-- Funkcja przyznająca kredyty za odpowiedź na pytanie
CREATE OR REPLACE FUNCTION award_credits_for_answer()
RETURNS TRIGGER AS $$
DECLARE
    credits_amount INTEGER;
BEGIN
    SELECT credits_reward INTO credits_amount
    FROM profile_questions
    WHERE id = NEW.question_id;
    
    INSERT INTO user_credits (user_id, balance, last_updated)
    VALUES (NEW.user_id, credits_amount, CURRENT_TIMESTAMP)
    ON CONFLICT (user_id) 
    DO UPDATE SET 
        balance = user_credits.balance + credits_amount,
        last_updated = CURRENT_TIMESTAMP;
    
    INSERT INTO credit_transactions
    (user_id, amount, transaction_type, description)
    VALUES
    (NEW.user_id, credits_amount, 'reward', 'qa_reward');
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Wyzwalacz przyznający kredyty za odpowiedź na pytanie
CREATE TRIGGER trg_award_credits_for_answer
AFTER INSERT ON profile_answers
FOR EACH ROW EXECUTE FUNCTION award_credits_for_answer();

-- Funkcja tworząca profil użytkownika przy rejestracji
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  -- Utwórz profil użytkownika
  INSERT INTO public.profiles (
    id,
    created_at,
    updated_at
  ) VALUES (
    new.id,
    now(),
    now()
  );
  
  -- Utwórz konto kredytowe z początkowym saldem
  INSERT INTO public.user_credits (
    user_id,
    balance,
    last_updated
  ) VALUES (
    new.id,
    10,
    now()
  );
  
  -- Zapisz transakcję początkową
  INSERT INTO public.credit_transactions (
    user_id,
    amount,
    transaction_type,
    description
  ) VALUES (
    new.id,
    10,
    'reward',
    'wb'
  );
  
  RETURN new;
END;
$$;

-- Wyzwalacz tworzący profil dla nowego użytkownika
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Funkcja aktualizująca procent uzupełnienia profilu
CREATE OR REPLACE FUNCTION update_profile_completion()
RETURNS TRIGGER AS $$
BEGIN
    NEW.profile_completion_percentage := 
        (CASE WHEN NEW.first_name IS NOT NULL THEN 10 ELSE 0 END) +
        (CASE WHEN NEW.last_name IS NOT NULL THEN 10 ELSE 0 END) +
        (CASE WHEN NEW.birth_date IS NOT NULL THEN 15 ELSE 0 END) +
        (CASE WHEN NEW.birth_time IS NOT NULL THEN 15 ELSE 0 END) +
        (CASE WHEN NEW.birth_location IS NOT NULL THEN 15 ELSE 0 END) +
        (CASE WHEN NEW.current_location IS NOT NULL THEN 15 ELSE 0 END) +
        (CASE WHEN NEW.relationship_status IS NOT NULL THEN 10 ELSE 0 END) +
        (CASE WHEN NEW.zodiac_sign_id IS NOT NULL THEN 10 ELSE 0 END);
    
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Wyzwalacz aktualizujący procent uzupełnienia profilu
CREATE TRIGGER trg_update_profile_completion
BEFORE INSERT OR UPDATE ON profiles
FOR EACH ROW EXECUTE FUNCTION update_profile_completion();




